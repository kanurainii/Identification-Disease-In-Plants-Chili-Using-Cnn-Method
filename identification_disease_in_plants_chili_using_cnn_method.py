# -*- coding: utf-8 -*-
"""Identification Disease In Plants Chili Using Cnn Method

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AilIM6CK2kHS9N-LiTmjk9Ud5CqckdH1

# IMAGE DATASHET
"""

import os

!wget --no-check-certificate \
https://github.com/Rifqiakmals12/Identification-Disease-In-Plants-Chili-Using-CNN-Method/raw/main/chili-plant-disease.zip

!unzip '/content/chili-plant-disease.zip'

train_healthy_dir = os.path.join('/content/chili-plant-disease/Train/healthy')

train_leafcurl_dir = os.path.join('/content/chili-plant-disease/Train/leaf curl')

train_leafspot_dir = os.path.join('/content/chili-plant-disease/Train/leaf spot')

train_whitefly_dir = os.path.join('/content/chili-plant-disease/Train/whitefly')

train_yellowish_dir = os.path.join('/content/chili-plant-disease/Train/yellowish')

valid_healthy_dir = os.path.join('/content/chili-plant-disease/Valid/healthy')

valid_leafcurl_dir = os.path.join('/content/chili-plant-disease/Valid/leaf curl')

valid_leafspot_dir = os.path.join('/content/chili-plant-disease/Valid/leaf spot')

valid_whitefly_dir = os.path.join('/content/chili-plant-disease/Valid/whitefly')

valid_yellowish_dir = os.path.join('/content/chili-plant-disease/Valid/yellowish')

train_healthy_names = os.listdir(train_healthy_dir)
print(train_healthy_names[:10])

train_leafcurl_names = os.listdir(train_leafcurl_dir)
print(train_leafcurl_names[:10])

train_leafspot_names = os.listdir(train_leafspot_dir)
print(train_leafspot_names[:10])

train_whitefly_names = os.listdir(train_whitefly_dir)
print(train_whitefly_names[:10])

train_yellowish_names = os.listdir(train_yellowish_dir)
print(train_yellowish_names[:10])

print('\n')

validation_healthy_hames = os.listdir(valid_healthy_dir)
print(validation_healthy_hames[:10])

validation_leafcurl_names = os.listdir(valid_leafcurl_dir)
print(validation_leafcurl_names[:10])

validation_leafspot_hames = os.listdir(valid_leafspot_dir)
print(validation_leafspot_hames[:10])

validation_whitefly_names = os.listdir(valid_whitefly_dir)
print(validation_whitefly_names[:10])

validation_yellowish_names = os.listdir(valid_yellowish_dir)
print(validation_yellowish_names[:10])

print('total training healthy images:', len(os.listdir(train_healthy_dir)))

print('total training leafcurl images:', len(os.listdir(train_leafcurl_dir)))

print('total training leafspot images:', len(os.listdir(train_leafspot_dir)))

print('total training whitefly images:', len(os.listdir(train_whitefly_dir)))

print('total training yellowish images:', len(os.listdir(train_yellowish_dir)))

print('\n')

print('total validation healthy images:', len(os.listdir(valid_healthy_dir)))

print('total validation leafcurl images:', len(os.listdir(valid_leafcurl_dir)))

print('total validation leafspot images:', len(os.listdir(valid_leafspot_dir)))

print('total validation whitefly images:', len(os.listdir(valid_whitefly_dir)))

print('total validation yellowish images:', len(os.listdir(valid_yellowish_dir)))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 6
ncols = 6

# Index for iterating over images
pic_index = 0

# Set up matplotlib fig, and size it to fit 6x6 pics
fig = plt.gcf()
fig.set_size_inches(ncols * 6, nrows * 6)

pic_index += 8

next_healthy_pic = [os.path.join(train_healthy_dir, fname)
                for fname in train_healthy_names[pic_index-8:pic_index]]
next_leafcurl_pic = [os.path.join(train_leafcurl_dir, fname)
                for fname in train_leafcurl_names[pic_index-8:pic_index]]
next_leafspot_pic = [os.path.join(train_leafspot_dir, fname)
                for fname in train_leafspot_names[pic_index-8:pic_index]]
next_whitefly_pic = [os.path.join(train_whitefly_dir, fname)
                for fname in train_whitefly_names[pic_index-8:pic_index]]
next_yellowish_pic = [os.path.join(train_yellowish_dir, fname)
                for fname in train_yellowish_names[pic_index-8:pic_index]]

for i, img_path in enumerate(next_healthy_pic + next_leafcurl_pic + next_leafspot_pic + next_whitefly_pic + next_yellowish_pic):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(8,5, i+1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255
train_datagen = ImageDataGenerator(rescale=1/255)
validation_datagen = ImageDataGenerator(rescale=1/255)

# Flow training images in batches of 120 using train_datagen generator
train_generator = train_datagen.flow_from_directory(
        '/content/chili-plant-disease/Train',  # This is the source directory for training images
        classes = ['healthy', 'leaf curl', 'leaf spot', 'whitefly', 'yellowish'],
        target_size=(200, 200),  # All images will be rized to 100x100
        batch_size=120,
        # Use binary labels
        class_mode='categorical')

# Flow validation images in batches of 19 using valid_datagen generator
validation_generator = validation_datagen.flow_from_directory(
        '/content/chili-plant-disease/Valid',  # This is the source directory for training images
        classes = ['healthy', 'leaf curl', 'leaf spot', 'whitefly', 'yellowish'],
        target_size=(200, 200),  # All images will be resized to 100x100
        batch_size=19,
        # Use binary labels
        class_mode='categorical',
        shuffle=False)

"""# BUILDING"""

import tensorflow as tf
import numpy as np
from itertools import cycle

from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from scipy import interp
from sklearn.metrics import roc_auc_score

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from keras.models import Sequential
from keras.layers import Activation, Dense, Conv2D, MaxPooling2D, ZeroPadding2D, Flatten
from keras.preprocessing.image import ImageDataGenerator

model = Sequential()

# Conv Layer pertama
model.add(Conv2D(16, (3,3), activation = 'relu', input_shape=(200,200, 3)))
model.add(MaxPooling2D(2,2))

# Conv Layer kedua
model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D(2,2))

# Conv Layer ketiga
model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(MaxPooling2D(2,2))

# Conv Layer keempat
model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(MaxPooling2D(2,2))

# Conv Layer kelima
model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D(2,2))

# Flatten
model.add(Flatten())

# Fully Connected Layer
model.add(Dense(512, activation='relu'))
model.add(Dense(5, activation='softmax'))

model.summary()

model.compile(optimizer = tf.optimizers.Adam(),
              loss = 'categorical_crossentropy',
              metrics=['accuracy'])

"""# TRAIN"""

history = model.fit(
            train_generator,
            validation_data=validation_generator,
            epochs=10)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Valid'], loc='upper right')
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Valid'], loc='lower right')
plt.show()

"""# Accuracy, ROC Curve, and AUC"""

model.evaluate(validation_generator)

STEP_SIZE_TEST=validation_generator.n//validation_generator.batch_size
validation_generator.reset()
preds = model.predict(validation_generator,
                      verbose=1)

model.save('model_2.h5')

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(200, 200))
  x = image.img_to_array(img)
  plt.imshow(x/255.)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(classes[0])
  if classes[0][0] == 1:
    print(fn + " cabai ini sehat ")
  elif classes[0][1] != 0:
    print(fn + " cabai ini menderita leaf curl ")
  elif classes[0][2] != 0:
    print(fn + " cabai ini menderita leaf spot ")
  elif classes[0][3] != 0:
    print(fn + " cabai ini menderita whitefly ")
  else:
    print(" cabai ini menderita yellowish ")